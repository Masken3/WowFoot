
% if(!a) {
Quest <%ESCAPE(mTitle);%> does not exist.
% } else {
<p>Quest:
% if(a->title[0]) {
<span class="itemName"><%ESCAPE(a->title);%></span>
% }
</p>

<p>
MinLevel: <%=a->minLevel%><br>
QuestLevel: <%=a->level%><br>
%#if CONFIG_WOW_VERSION > 30000
MaxLevel: <%=a->maxLevel%><br>
%#endif
</p>

<p style="display:inline;">
Rewards:<br>
Money: <% moneyHtml(stream, a->rewardOrRequiredMoney); %><br>

Experience:
% if(mRewXp == 0) {
0
% } else {
<%= mRewXp %> xp, or <% moneyHtml(stream, a->rewardMoneyMaxLevel); %> at max level.
% }
<br>

%#if (CONFIG_WOW_VERSION > 30000)
% for(size_t i=0; i<5; i++) { int id = a->rewardFactionId[i]; if(id != 0) {
Reputation: <%NAMELINK(gFactions, id);%> <%= rewRepValue(i) %><br>
% } }
%#else
% for(size_t i=0; i<5; i++) { int id = a->rewardRepFaction[i]; if(id != 0) {
Reputation: <%NAMELINK(gFactions, id);%> <%= a->rewardRepValue[i] %><br>
% } }
%#endif

% if(a->rewardMailTemplateId != 0) {
Mail: <%= a->rewardMailTemplateId %> after <%= a->rewardMailDelaySecs %> seconds.<br>
% }

% for(size_t i=0; i<4; i++) { int id = a->rewardItemId[i]; if(id != 0) {
Item: <%NAMELINK(gItems, id);%>
<% int count = a->rewardItemCount[i]; if(count != 1) { %> x<%= count %> <% } %>
<br>
% } }

% for(size_t i=0; i<6; i++) { int id = a->rewardChoiceItemId[i]; if(id != 0) {
Item choice: <%NAMELINK(gItems, id);%>
<% int count = a->rewardChoiceItemCount[i]; if(count != 1) { %> x<%= count %> <% } %>
<br>
% } }

% int castId = a->rewardSpell;
% if(a->rewardSpellCast) castId = a->rewardSpellCast;
% if(castId) {
Spell: <%NAMELINK(gSpells, castId);%><br>
% }
%//</p>

<p>Giver:
% for(auto pair = gCreatureQuestGivers.findQuest(a->id); pair.first != pair.second; ++pair.first) {
% const QuestRelation& qr(*pair.first->second);
<%NAMELINK(gNpcs, qr.id);%><br>
% }
% for(auto pair = gObjectQuestGivers.findQuest(a->id); pair.first != pair.second; ++pair.first) {
% const QuestRelation& qr(*pair.first->second);
<%NAMELINK(gObjects, qr.id);%><br>
% }
% for(auto pair = gItems.findStartQuest(a->id); pair.first != pair.second; ++pair.first) {
% const Item& i(*pair.first->second);
><%NAMELINK(gItems, i.entry);%><br>
% }
</p>

<p>Finisher:
% for(auto pair = gCreatureQuestFinishers.findQuest(a->id); pair.first != pair.second; ++pair.first) {
% const QuestRelation& qr(*pair.first->second);
% printf("cqf: %i\n", qr.id);
<%NAMELINK(gNpcs, qr.id);%><br>
% }
% for(auto pair = gObjectQuestFinishers.findQuest(a->id); pair.first != pair.second; ++pair.first) {
% const QuestRelation& qr(*pair.first->second);
<%NAMELINK(gObjects, qr.id);%><br>
% }
</p>

<p>Encoded objectives:<br>
% for(uint i=0; i<ARRAY_SIZE(a->objective); i++) {
% const Quest::Objective& o(a->objective[i]);
% bool empty = true;
%// objective.text is optional, used only for scripted objectives.
% if(!o.text.empty()) {
% empty = false;
% streamWowFormattedText(stream, o.text);
% }
% if(o.reqSourceCount != 0) {
% empty = false;
Source item: <%NAMELINK(gItems, o.reqSourceId);%> x<%=o.reqSourceCount%>
% }
% if(o.reqItemCount != 0) {
% empty = false;
Item: <%NAMELINK(gItems, o.reqItemId);%> x<%=o.reqItemCount%>
% }
% if(o.reqSpellCast) {
% empty = false;
Cast <%NAMELINK(gSpells, o.reqSpellCast);%>
% if(o.reqCreatureOrGOCount != 0) {
on
% }
% } else if(o.reqCreatureOrGOCount > 0) {
% empty = false;
Kill
% } else if(o.reqCreatureOrGOCount < 0) {
% empty = false;
Use
% }
% if(o.reqCreatureOrGOCount > 0) {
creature <%NAMELINK(gNpcs, o.reqCreatureOrGOId);%> <%=o.reqCreatureOrGOCount%> times.
% } else if(o.reqCreatureOrGOCount < 0) {
object <%NAMELINK(gObjects, -o.reqCreatureOrGOId);%> <%=o.reqCreatureOrGOCount%> times.
% }
% if(!empty) {
<br>
% }
% }
%// todo: spawnPoints.
% for(auto p = gAreaQuestObjectives.findQuest(a->id); p.first != p.second; ++p.first) {
% const AreaTrigger& at(gAreaTriggers[p.first->second->id]);
% const Map& map(gMaps[at.map]);
Visit POI <%=at.id%>: <%=at.map%> (<%=map.name%>), <%=at.x%> <%=at.y%> <%=at.z%>, radius <%=at.radius%>
% }
</p>

<p>Details:<br>
% streamWowFormattedText(stream, a->details);
</p>

<p>Objectives:<br>
% streamWowFormattedText(stream, a->objectives);
</p>
<p>In progress:<br>
% streamWowFormattedText(stream, a->requestItemsText);
</p>
<p>offerRewardText:<br>
% streamWowFormattedText(stream, a->offerRewardText);
</p>
<p>endText:<br>
% streamWowFormattedText(stream, a->endText);
</p>
%#if CONFIG_WOW_VERSION > 30000
<p>completedText:<br>
% streamWowFormattedText(stream, a->completedText);
</p>
%#endif

% returnCode = tabsChtml::run(stream);

% }	//if(a)
