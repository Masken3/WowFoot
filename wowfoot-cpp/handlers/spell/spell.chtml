% if(!a) {
Spell <%ESCAPE(mTitle);%> does not exist.
% } else {
<p class="itemName"><%ESCAPE(a->name);%></p>

%// icon
<p>
% const SpellIcon* si = gSpellIcons.find(a->spellIconID);
% if(si) {
<img src="<%ESCAPE_URL(getIconRaw(si->icon));%>" alt="<%ESCAPE(si->icon);%>">
% } else {
Warning: invalid icon id (<%=a->spellIconID%>)
% }
% if(a->activeIconID) { si = gSpellIcons.find(a->activeIconID);
% if(si) {
<img src="<%ESCAPE_URL(getIconRaw(si->icon));%>" alt="<%ESCAPE(si->icon);%>">
% } else {
Warning: invalid icon id (<%=a->activeIconID%>)
% }
% }
</p>

% if(a->description) {
<p class="itemDescription"><%ESCAPE(a->description);%></p>
% }
<p>Rank: <%=a->rank%></p>
<p>Tooltip: <%ESCAPE(a->toolTip);%></p>

<p>Mechanic:
% if(a->Mechanic) {
<%=gSpellMechanics[a->Mechanic].name%>
% }
(<%=a->Mechanic%>)</p>

% auto slas = SkillLineAbilityIndex::findSpell(a->id);
% for(; slas.first != slas.second; ++slas.first) {
% const SkillLineAbility* sla = slas.first->second;
<p>SkillLineAbility: skill <%=sla->skill%>, req <%=sla->reqSkillValue%>, min <%=sla->minValue%>, max <%=sla->maxValue%>.<br>
<span class="skillRed"><%=sla->minValue - (sla->maxValue - sla->minValue)%></span>
<span class="skillYellow"><%=sla->minValue%></span>
<span class="skillGreen"><%=sla->maxValue - (sla->maxValue - sla->minValue) / 2%></span>
<span class="skillGray"><%=sla->maxValue%></span>
</p>
% }

% streamPlainMembers(stream);

<p>
Level:
% const Spell& s(*a);
% int maxLevel = s.maxLevel - s.spellLevel;
% int minLevel = s.baseLevel - s.spellLevel;
<%=minLevel%> - <%=maxLevel%>
</p>

<p>
Duration:
% const SpellDuration* sd = gSpellDurations.find(a->DurationIndex);
% if(sd) {
<%=sd->base%>
% //if(maxLevel && sd->perLevel) {
+ <%=sd->perLevel%> * level
% //}
% } else {
0
% }
</p>

<p>Cost:
<%=s.manaCost%> + <%=s.manaCostPerLevel%>*level + (<%=s.manaPerSecond%> + <%=s.manaPerSecondPerLevel%>*level) / second
% if(s.ManaCostPercentage != 0) {
+ <%=s.ManaCostPercentage%>% of base <%streamPowerName(stream, s.powerType);%>.
% }
</p>

<p>Range:
% switch(s.rangeIndex) {
% case SPELL_RANGE_IDX_SELF_ONLY:
Self
% break; case SPELL_RANGE_IDX_COMBAT:
Combat
% break; case SPELL_RANGE_IDX_ANYWHERE:
Anywhere
% break; default: {
% const SpellRange* sr(gSpellRanges.find(s.rangeIndex));
% if(sr) {
<%=sr->min%> to <%=sr->max%> yards
% } else {
Unknown
% }}}
</p>

% streamEffects(stream);

% returnCode = tabsChtml::run(stream);

% }	//if(a)
