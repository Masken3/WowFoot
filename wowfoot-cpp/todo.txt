* Comments
** Check encoding; I think it's Latin-1, but it's presented as UTF-8 to the browser.
Example: http://localhost:3002/npc=19516
*** Seems to  be fixed.

** Redirect wowwiki links to wowpedia.
Example: http://localhost:3002/item=30450
** Done.

** Make sure document encoding is specified. We use UTF-8.
** Done.

* Make stuff more thread-safe.
** Mutex all load() operations with a single mutex.
*** Done.
** Test DLL reloading under heavy load (like the test program).
*** I've seen one crash already.
*** Problem here is, DLLs are unloaded at the start of compilation,
	but reloaded as soon as they are needed, which (under load) is before they've been compiled.
	Thus we get a critical assert failure.
**** We need to suspend all operations until compilation is complete.
**** The unload operation also needs to wait until all active operations are complete before actually unloading anything.


* Comment errors not caught by automated tools:
** http://localhost:3002/achievement=40
*** cranee
** http://localhost:3002/itemset=668
*** Souldivider
** http://localhost:3002/itemset=750
*** warhead0
** http://localhost:3002/npc=25881
** Get comment IDs for these.

* Comment parsing needs to be more advanced. I think we should build a DOM tree,
then run a recursive/repeating reduction pass on it, and then print it.
Slower, uses some more memory, but it's the only sane way I can think of to fix
the more advanced problems.
** Separate sections: parser, optimizer, printer.
** Printer got tangled up in the node definition.
** Remove end tag nodes; they are not needed. The start tag nodes can print their own ends.
** Done.

* Quest page seems slow. Profile, speed it up.
* Some item pages are also slow.

* Test program should multi-thread; retrieve the next page while parsing the last.
** Best done, I think, with a thread pool for multiple instances of testUrl().
*** This would allow us to do any number of threads, not just two. The server is already multi-threaded.
** Done.

* Entities (npcs and objects) can be summoned by spells or scripts.
We should endeavour to display the points where this might happen on the map.

Feature list, per page, with YES/NO for "implemented?":
* zone
** Map	YES
** Quests	HARD-CODED
** NPCs	NO
** Objects	NO
** Areas?	NO
** Herbs	NO
** Mining nodes	NO
** comments	NO

* search
** phrase	YES
** multi-word	NO
** areas?	NO

* item
** icon	YES
** spell use	YES
*** spell description	NO
** sold by	YES
** currency for	YES
** same look as	YES
** dropped by	YES
** contained in object	YES
** contained in item	NO
** pickpocketed from	YES
** skinned from	NO
** reference loot	PARTIAL
** comments	YES
** created by (spell) NO

* itemset
** DBC items?	YES
** TDB items	YES
** spell use	YES
*** spell description	NO
** comments	YES

* items
** ilvl	BUGGED
** clvl	BUGGED
** class/subclass	YES

* spell
** icon	YES
** description	RAW
** tooltip	RAW
** used by
*** item	YES
*** object	NO
*** npc		NO
*** player class	NO
*** script?	NO
** comments	YES

* spells
** two icons	HARD-CODED
** input form	NO
** professions	PARTIAL
** player classes	NO
** more?	NO

* npc
** faction	YES
** stats	NO
** spawnpoints	YES
*** out-of-map points	NO
*** conjured-by-others points NO
** comments	YES
** quests	NO
** drops	NO
** tameable	NO

* achievement
** description	YES
** requirements	NO
** comments	YES

* object
** spawnpoints	YES
*** conjured-by-others points NO
** comments	YES
** contains	YES
** spell use	NO
** quests	NO

* quest
** levels	YES
** rewards	YES
** texts	YES
** requirements	NO
** comments	YES
** givers	NO
** points-of-interest	NO
*** givers, targets
** isDaily	NO

* quests
** max rep	HARD-CODED
** level	NO
** zone	NO
** class	NO
** profession	NO
** faction?	NO

* faction
** members	YES
*** reputation loss for killing	NO
** enemies	YES
** quests	YES
*** reputation gain	NO
** comments	YES

* title
** source	YES
** comments	YES

* skills
** sort by any column NO

* skill NO
** comments NO
** For lock-opening skills, display objects, creatures and items that can be opened, and the skill levels required.
*** This includes Mining, Herbalism & Lockpicking.
*** Skinning operates strictly on the level of the target, and so has nothing special to list.

* main page	NO

* link to source code and license on every page (required by AGPL)	YES
