* The overall purpose is to be a replacement for Wowhead.
* Data will be taken from an actual WoW installation, as well as a Trinity database.
* This will be useful for modders, as their mods will show up.

* Data will be taken from MPQ, DBC and BLP files, as well as from the Trinity database.
* It's possible to extract commentary and screenshots from Wowhead.
* It may also be possible to integrate a model viewer. All models and textures are available in the MPQ files.

* Map data is found in AreaTable.dbc, WorldMapArea.dbc, WorldMapContinent.dbc, WorldMapOverlay.dbc, WorldMapTransforms.dbc and locale-*.mpq/Interface/WORLDMAP/.
* Secondary map data is found in AreaPOI.dbc, AreaTrigger.dbc, WorldSafeLocs.dbc.
* Minimap data is found in textures\Minimap, md5translate.trs...

* Quest, NPC and Item data is found in the Trinity Database.
* NPC data includes stats, drop tables, locations, model, but not screenshots or comments.
* Quest data includes startpoints, endpoint, prerequisites, objectives, rewards.
* Item data includes stats, sources (indirectly), model.

* Class info, spells and abilities are not easily found. We'll skip them for now.
* However, class-specific quests and items will still be marked as such.

* The user interface is written in using Embedded Ruby on Webrick.
* A data extractor is written in C++.
* The extractor will be run on interface-server startup if the extractor itself or any of its data files have changed.
* The extractor will only extract changed or un-extracted parts, for improved startup speed.

* Mining and herbalism skill requirements, among others, are determined by the target entity's lock type. See Lock.dbc and LockType.dbc.
* Objects and items both have lockId.

* Skinning is handled separately. CreatureTemplate has RequiredLootSkill (type of skill: skinning, engineering, mining, herbalism). Required skill LEVEL is based on the creature's level.
* You can't skin objects.

* Finding the required skill level for learning spells depends on how the spell is learned.
* For trainers, it's in the trainer table.
* For items, it's the RequiredSkillRank column. This column actually determines the level required to USE THE ITEM, not specifically to learn the spell.
* RequiredSkillRank is also used for prospecting and milling.
* Disenchanting uses RequiredDisenchantSkill, a separate column.
* Obvious when you think about it, because a magic item with a built-in spell may have skill requirements.
* Engineering trinkets and helmets are probably the most common such things.

* To find which item(s) can teach a spell, find the item(s) that use the spell that teaches the target spell.
* Spell effect 36 (Learn Spell), target id in column depending on source spell:
uint32 spellToLearn = (m_spellInfo->Id == 483 || m_spellInfo->Id == 55884) ? damage : m_spellInfo->Effects[effIndex].TriggerSpell;
* Irrelevant; 483 and 55884 are never used directly.
* More commonly, look for item's spelltrigger 6.

* mangos-zero uses db table "conditions". See ObjectMgr.h for enum definitions.
* See DBCStructure.h and DBCEnums.h for DBC information.

* All uses of CONFIG_WOW_VERSION are subject to correction.
